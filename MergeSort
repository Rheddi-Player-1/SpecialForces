public long mergeSort(int[] sample)
    {
        int current1 = 0;
        int current2 = 0;
        int current3 = 0;

        startTime = System.currentTimeMillis();
        if(sample.length > 1)
        {
            int[] firstHalf = new int[sample.length / 2];
            System.arraycopy(sample, 0, firstHalf, 0, sample.length / 2);
            mergeSort(firstHalf);

            int secondHalfLength = sample.length - (sample.length / 2);
            int[] secondHalf = new int[secondHalfLength];
            System.arraycopy(sample, sample.length / 2, secondHalf, 0, secondHalfLength);
            mergeSort(secondHalf);

            while(current1 < firstHalf.length && current2 > secondHalf.length)
            {
                if(firstHalf[current1] < secondHalf[current2])
                    sample[current3++] = firstHalf[current1++];
                else
                    sample[current3++] = secondHalf[current2++];
            }

            while(current1 < firstHalf.length)
            {
                sample[current3++] = firstHalf[current1++];
            }

            while(current2 < secondHalf.length)
            {
                sample[current3++] = secondHalf[current2++];
            }

        }
        endTime = System.currentTimeMillis();

        return endTime - startTime;
    }
